{
  "2D Arrays": [
    [
      {
        "image": "2D Arrays_example01.png",
        "code": "import matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\ndef disp(x, sep=&#39;.0f&#39;, annot=False,  figsize=(5, 5)):\n    plt.figure(figsize=figsize)\n    plt.axis(\"off\")\n    sns.heatmap(x, annot=annot, fmt=sep, cmap=\"YlGnBu\", cbar=False)",
        "css": "border: 3px solid #ED6A5A;"
      }
    ],
    [
      {
        "image": "2D Arrays_example02.png",
        "code": "pixX, pixY= (15, 15) \narray = [[(i+j)%2 for i in range(pixX)] for j in range(pixY)]\ndisp(array)",
        "css": "border: 3px solid #007AB8;"
      }
    ],
    [
      {
        "image": "2D Arrays_example03.png",
        "code": "pixX,pixY=(15,15)\nx, y = np.meshgrid(np.linspace(-1,1,pixX), np.linspace(-1,1,pixY))\nd = np.sqrt(x**2+y**2)\nsigma, mu = 1.0, 0.0\narray = np.exp(-( (d-mu)**2 / ( 2.0 * sigma**2 ) ) )\ndisp(array, sep=&#39;.1f&#39; )",
        "css": "border: 3px solid #007AB8;"
      }
    ],
    [
      {
        "image": "2D Arrays_example04.png",
        "code": "array = np.ones((15,15))\ndisp(array)",
        "css": "border: 3px solid #007AB8;"
      }
    ],
    [
      {
        "image": "2D Arrays_example05.png",
        "code": "array[4, 4]=2\ndisp(array)",
        "css": "border: 3px solid #A8DCF0;"
      }
    ],
    [
      {
        "image": "2D Arrays_example06.png",
        "code": "array[6:10, 2:9]=2\ndisp(array)",
        "css": "border: 3px solid #A8DCF0;"
      }
    ],
    [
      {
        "image": "2D Arrays_example07.png",
        "code": "np.random.seed(42)\narray = np.random.randint(0, 10, size=(15, 15))\ndisp(array)",
        "css": "border: 3px solid #007AB8;"
      }
    ]
  ],
  "3D Arrays": [
    [
      {
        "image": "3D Arrays_exampleAA.png",
        "code": "import scipy\n\ndef plot_voxels(varray, ax=None, title=None, linewidth=0.8, aspect=None):\n\n    if ax == None:\n        fig = plt.figure(figsize=(16/2, 9/2))\n        ax = fig.add_subplot(1, 1, 1, projection=\"3d\")\n    ax.view_init(30, 200)\n    colors = cmap(varray)\n    ax.voxels(varray, facecolors=colors,\n              edgecolor=\"black\", linewidth=linewidth)\n    ax.axis(\"off\")\n    if aspect:\n        ax.set_box_aspect(aspect = aspect) \n    if title:\n        ax.set_title(title, fontsize=30)\n\ncmap = plt.get_cmap(\"YlGnBu\")",
        "css": "border: 3px solid #ED6A5A;width: 150px"
      }
    ],
    [
      {
        "image": "3D Arrays_exampleAB.png",
        "code": "voxelarrray = scipy.ndimage.generate_binary_structure(3, 1)\nplot_voxels(voxelarrray)",
        "css": "border: 3px solid #007AB8;width: 150px"
      }
    ],
    [
      {
        "image": "3D Arrays_exampleAC.png",
        "code": "voxelarrray = scipy.ndimage.generate_binary_structure(3, 2)\nplot_voxels(voxelarrray)",
        "css": "border: 3px solid #007AB8;width: 150px"
      }
    ],
    [
      {
        "image": "3D Arrays_exampleAD.png",
        "code": "stacked_array = np.concatenate((voxelarrray, voxelarrray), axis=1)\nplot_voxels(stacked_array , aspect=(1,2,1))",
        "css": "border: 3px solid #A8DCF0;width: 150px;"
      }
    ]
  ],
  "Filtering": [
    [
      {
        "image": "Filtering_HeaderGauss.png",
        "code": "import matplotlib.pyplot as plt\nimport numpy as np\nfrom scipy.ndimage import gaussian_filter\n\ndef make_voxelarray(grids = 2,boxs = 5):\n    voxelarray = np.zeros((boxs * grids, boxs * grids, boxs * grids))\n\n    i = 9\n    for xi in range(0, 2):\n        for yi in range(0, 2):\n            for zi in range(0, 2):\n                voxelarray[\n                    xi * boxs: xi * boxs + boxs,\n                    yi * boxs: yi * boxs + boxs,\n                    zi * boxs: zi * boxs + boxs,\n                ] = i\n                i -= 1\n\n    voxelarray = np.uint8(voxelarray * 255 / 8)\n    return voxelarray\n\n\ndef plot_voxels(varray, ax=None, title=None, linewidth=0.1, aspect=None):\n\n    if ax == None:\n        fig = plt.figure(figsize=(16, 9))\n        ax = fig.add_subplot(1, 1, 1, projection=\"3d\")\n    ax.view_init(30, 200)\n    colors = cmap(varray)\n    ax.voxels(varray, facecolors=colors,\n              edgecolor=\"black\", linewidth=linewidth)\n    ax.axis(\"off\")\n    if aspect:\n        ax.set_box_aspect(aspect = aspect) \n    if title:\n        ax.set_title(title, fontsize=30)\n\nplt.figure(figsize=(16, 9))",
        "css": "border: 3px solid #ED6A5A;width: 150px"
      }
    ],
    [
      {
        "image": "Filtering_ArrayOrange.png",
        "code": "cmap = plt.get_cmap(\"YlGnBu\")\nvoxelarray= make_voxelarray()\nplot_voxels(voxelarray)",
        "css": "border: 3px solid #007AB8;width: 150px"
      }
    ],
    [
      {
        "image": "Filtering_ArrayFiltering.png",
        "code": "cmap = plt.get_cmap(\"OrRd_r\")\nvoxelarray= make_voxelarray()\nplot_voxels(voxelarray)",
        "css": "border: 3px solid #007AB8;width: 150px"
      }
    ],
    [
      {
        "image": "Filtering_ArrayFilteringSigma1.png",
        "code": "voxelarray1 = gaussian_filter(voxelarray, sigma=1)\nplot_voxels(voxelarray1)",
        "css": "border: 3px solid #A8DCF0;width: 150px;"
      }
    ],
    [
      {
        "image": "Filtering_ArrayFilteringSigma2.png",
        "code": "voxelarray2 = gaussian_filter(voxelarray, sigma=2)\nplot_voxels(voxelarray2)",
        "css": "border: 3px solid #A8DCF0;width: 150px;"
      }
    ],
    [
      {
        "image": "Filtering_ArrayFilteringSigma3.png",
        "code": "voxelarray3 = gaussian_filter(voxelarray, sigma=3)\nplot_voxels(voxelarray3)",
        "css": "border: 3px solid #A8DCF0;width: 150px;"
      }
    ]
  ]
}